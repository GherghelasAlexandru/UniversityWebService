-- 1. Să se creeze baza de date "Universitate" cu collate-ul SQL_Romanian_CP1250_CS_AS

CREATE DATABASE Universitate
COLLATE SQL_Romanian_CP1250_CS_AS;

-- 2. Să se creeze tabelele din baza "Universitate".

CREATE TABLE Orase (
    OrasID INT IDENTITY(1,1) PRIMARY KEY,
    Denumire NVARCHAR(100) COLLATE SQL_Romanian_CP1250_CS_AS
);

CREATE TABLE Grupa (
    GrupaID INT IDENTITY(1,1) PRIMARY KEY,
    Denumire NVARCHAR(100) COLLATE SQL_Romanian_CP1250_CS_AS
);

CREATE TABLE Student (
    StudentID INT IDENTITY(1,1) PRIMARY KEY,
    GrupaID INT,
    OrasID INT,
    Nume NVARCHAR(100) COLLATE SQL_Romanian_CP1250_CS_AS,
    Prenume NVARCHAR(100) COLLATE SQL_Romanian_CP1250_CS_AS,
    FOREIGN KEY (GrupaID) REFERENCES Grupa(GrupaID),
    FOREIGN KEY (OrasID) REFERENCES Orase(OrasID)
);

CREATE TABLE Materie (
    MaterieID INT IDENTITY(1,1) PRIMARY KEY,
    Nume NVARCHAR(100) COLLATE SQL_Romanian_CP1250_CS_AS
);

CREATE TABLE Note (
    NoteID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID INT,
    MaterieID INT,
    Nota INT,
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID),
    FOREIGN KEY (MaterieID) REFERENCES Materie(MaterieID)
);

-- 3. Să se realizeze integritatea bazei de date prin crearea de constrângeri pentru cele 4 relații prezentate.

ALTER TABLE Student
ADD CONSTRAINT FK_Student_Grupa FOREIGN KEY (GrupaID) REFERENCES Grupa(GrupaID);

ALTER TABLE Student
ADD CONSTRAINT FK_Student_Orase FOREIGN KEY (OrasID) REFERENCES Orase(OrasID);

ALTER TABLE Note
ADD CONSTRAINT FK_Note_Student FOREIGN KEY (StudentID) REFERENCES Student(StudentID);

ALTER TABLE Note
ADD CONSTRAINT FK_Note_Materie FOREIGN KEY (MaterieID) REFERENCES Materie(MaterieID);

-- 4. Să se introducă în baza de date următoarele informații:
-----------------------------------------------------------------------------------------
INSERT INTO Orase(Denumire)
VALUES(N'Ploiești'),
(N'Pitești'),
(N'Constanța'),
(N'București'),
(N'Călărași'),
(N'Iași'),
(N'Slobozia'),
(N'Sibiu'),
(N'Cluj-Napoca'),
(N'Brașov'),
(N'Fetești'),
(N'Satu-Mare'),
(N'Oradea'),
(N'Cernavodă');
-----------------------------------------------------------------------------------------
INSERT INTO Grupa (Denumire)
VALUES ('A'),
('B'),
('C'),
('D');
-----------------------------------------------------------------------------------------
INSERT INTO Materie (Nume)
VALUES (N'Geometrie'),
(N'Algebră'),
(N'Statistică'),
(N'Trigonometrie'),
(N'Muzică'),
(N'Desen'),
(N'Sport'),
(N'Filozofie'),
(N'Literatură'),
(N'Engleză'),
(N'Fizică'),
(N'Franceză'),
(N'Chimie');
-----------------------------------------------------------------------------------------
INSERT INTO Student (GrupaID ,OrasID ,Nume ,Prenume)
    VALUES
	(1, 1, 'Popescu', 'Mihai'),
	(1, 4, 'Ionescu', 'Andrei'),
	(1, 3, 'Ionescu', 'Andreea'),
	(1, 5, 'Dinu', 'Nicolae'),

	(2, 14, 'Constantin', N'Ionuț'),
	(2, 6, 'Simion', 'Mihai'),
	(2, 14, 'Constantinescu', N'Ana-Maria'),
	(2, 6, N'Amăriuței ', 'Eugen'),
	(2, 8, N'Știrbei', 'Alexandru'),

	(3, 10, 'Dumitru', 'Anghela'),
	(3, 13, 'Dumitrache', 'Ion'),
	(3, 13, N'Șerban', 'Maria-Magdalena'),
	(3, 9, 'Chelaru', 'Violeta'),
	(3, 9, 'Sandu', 'Daniel'),

	(4, 12, 'Marinache', 'Alin'),
	(4, 12, 'Panait', 'Vasile'),
	(4, 11, 'Popa', 'Mirela'),
	(4, 11, N'Dascălu', N'Daniel Ștefan'),
	(4, 11, 'Georgescu ', 'Marian'),
	(4, 1, N'Dumitrașcu', 'Marius'),
	(4, 4, 'Dinu', 'Ionela');
-----------------------------------------------------------------------------------------
INSERT INTO Note (StudentID, MaterieID, Nota)
     VALUES
           (1, 13, 7), (1, 11, 4), (1, 12, 7), (1, 11, 6),
                   (2, 2, 5), (2, 3, 9), (2, 5, 6), (2, 11, 9), (2, 13, 10), (2, 7, 8),
		   (3, 7, 1), (3, 9, 2), (3, 12, 9), (3, 7, 5), (3, 9, 4), (3, 9, 7),
		   (4, 13, 8), (4, 2, 9), (4, 3, 10), 
		   (5, 2, 10), (5, 7, 10), (5, 11, 8),
		   (6, 11, 8), (6, 2, 8), (6, 7, 3), (6, 7, 3), (6, 7, 1), (6, 7, 1),
		   (7, 7, 5), (7, 11, 8), (7, 2, 2), (7, 2, 5),
		   (8, 2, 6), (8, 7, 10), (8, 12, 7),
		   (9, 13, 9), (9, 11, 2), (9, 7, 1), (9, 11, 2), (9, 11, 5), (9, 7, 6),
		   (10, 6, 9), (10, 8, 7), (10, 10, 9),
		   (11, 6, 8), (11, 3, 2), (11, 8, 7), (11, 3, 6),
		   (12, 10, 7), (12, 8, 4), (12, 6, 8), (12, 8, 4), (12, 8, 4),
		   (13, 12, 1), (13, 6, 3), (13, 10, 10), (13, 12, 6), (13, 6, 1),
		   (14, 6, 3), (14, 8, 9), (14, 12, 4), (14, 6, 8), (14, 12, 5),
		   (15, 6, 7), (15, 11, 8), (15, 10, 5),
		   (16, 7, 5), (16, 6, 7), (16, 3, 10), (16, 11, 8), (16, 9, 6), (16, 8, 9),
		   (17, 10, 3), (17, 8, 6), (17, 6, 6), (17, 10, 6),
		   (18, 11, 4), (18, 12, 9), (18, 3, 10), (18, 11, 2), (18, 11, 1), (18, 11, 3), (18, 11, 5),
		   (19, 12, 10), (19, 10, 10), (19, 11, 8),
		   (20, 7, 5), (20, 2, 6), (20, 13, 2), (20, 13, 2), (20, 13, 5),
		   (21, 5, 9), (21, 9, 8), (21, 7, 8);

-- 5. Să se afișeze numărul de orașe din provincie.

SELECT COUNT(*) NrOraseProvincie 
FROM Orase
WHERE Denumire <> N'București';

-- 6. Să se afișeze numărul de materii la care s-au susținut examene.

SELECT COUNT(DISTINCT MaterieID) AS [MateriiFaraExamene]
FROM Note

-- 7. Să se afișeze studenții în ordine alfabetică.

SELECT Nume, Prenume 
FROM Student
ORDER BY Nume ASC, Prenume ASC

-- 8. Să se afișeze studenții cu 2 prenume (prenumele conține caracterul blanc sau - ( liniuță) ).

SELECT * FROM Student
WHERE Prenume LIKE '% %' or Prenume LIKE '%-%'

-- 9. Să se afișeze studenții din provincie.

SELECT Student.Nume, Student.Prenume
FROM Student
JOIN Orase ON Student.OrasID = Orase.OrasID
WHERE Orase.Denumire <> N'București';

-- 10. Să se afișeze orașele care nu au nici un student încris.

SELECT Orase.Denumire 
FROM Orase
LEFT JOIN Student ON Orase.OrasID = Student.OrasID
WHERE Student.StudentID IS NULL

-- 11. Să se afișeze grupele care au cel puțin 5 studenți.

SELECT Grupa.Denumire 
FROM Grupa
INNER JOIN Student ON Grupa.GrupaID = Student.GrupaID 
GROUP BY Grupa.Denumire
HAVING COUNT(Student.GrupaID) >=5

-- 12. Să se afișeze numele grupei care are cei mai mulți studenți.

SELECT TOP 1 Grupa.Denumire 
FROM Grupa
INNER JOIN Student on Grupa.GrupaID = Student.GrupaID
GROUP BY Grupa.Denumire
ORDER BY COUNT(Student.StudentID) DESC

-- 13. Să se afișeze materiile la care nu s-a dat niciodată examen.

SELECT Materie.Nume 
FROM Materie
LEFT JOIN Note ON Materie.MaterieID = Note.MaterieID
WHERE Note.MaterieID IS NULL

-- 14. Să se afișeze studenții care au urmat și cursuri opționale ( au notă la mai mult de 3 materii ).

SELECT Student.Nume, Student.Prenume FROM Student
INNER JOIN Note ON Student.StudentID = Note.StudentID
GROUP BY Student.Nume, Student.Prenume
HAVING COUNT (DISTINCT Note.MaterieID) > 3

-- 15. Să se calculeze media generală a fiecărui student ( vezi ** ).

SELECT Student.Nume, Student.Prenume, CAST(AVG(CAST(Note.Nota AS DECIMAL(10, 2))) AS DECIMAL(10, 2)) AS [MediaGenerala]
From Student 
JOIN ( SELECT MAX(NoteID) AS [UltimaNotaID], StudentID, MaterieID FROM Note GROUP BY StudentID, MaterieID)
UltimaNota ON Student.StudentID = UltimaNota.StudentID
JOIN Note ON UltimaNota.UltimaNotaID = Note.NoteID
GROUP BY Student.StudentID, Student.Nume, Student.Prenume

-- 16. Să se afișeze grupa care are media generală cea mai mare.

SELECT TOP 1 Grupa.Denumire AS [Grupa], CAST(AVG(CAST(Note.Nota AS DECIMAL(10, 2))) AS DECIMAL(10, 2)) AS [Medie]
FROM Student
JOIN Grupa ON Student.GrupaID = Grupa.GrupaID
JOIN Note ON Student.StudentID = Note.StudentID
GROUP BY Grupa.GrupaID, Grupa.Denumire
ORDER BY Medie DESC

-- 17. Să se afișeze studenții bursieri ( care au media generală cel puțin 8,50 ).

SELECT Student.Nume, Student.Prenume, CAST(AVG(CAST(Note.Nota AS DECIMAL(10, 2))) AS DECIMAL(10, 2)) AS [Medie]
FROM Student
JOIN Note on Student.StudentID = Note.StudentID
GROUP BY Student.Nume, Student.Prenume
HAVING AVG(Note.Nota) >= 8.50

-- 18. Să se afișeze studenții care nu au promovat materia "Chimie" de la prima examinare, dar au promovat ulterior.

SELECT DISTINCT Student.Nume, Student.Prenume
FROM Student
JOIN Note ON Student.StudentID = Note.StudentID
WHERE Note.MaterieID = (SELECT MaterieID FROM Materie WHERE Nume = 'Chimie')
    AND Note.Nota < 5.00
    AND Student.StudentID IN (
        SELECT StudentID
        FROM Note
        WHERE MaterieID = (SELECT MaterieID FROM Materie WHERE Nume = 'Chimie')
            AND Nota >= 5.00);

-- 19. Să se afișeze studentul care a susținut cele mai multe examinări la aceeași materie.

SELECT TOP 1 Student.Nume, Student.Prenume, Materie.Nume AS [Materie], COUNT(*) AS [NumarExaminari]
FROM Student
JOIn Note ON Student.StudentID=Note.StudentID
JOIN Materie ON Note.MaterieID=Materie.MaterieID
GROUP BY Student.StudentID, Student.Nume, Student.Prenume, Materie.MaterieID, Materie.Nume
ORDER BY COUNT(*) DESC;

-- 20. Să se afișeze studenții și numărul de examinări la fiecare materie în parte.

SELECT Student.Nume, Student.Prenume, Materie.Nume AS [Materie], COUNT(*) AS [NumarExaminari]
FROM Student
JOIN Note ON Student.StudentID=Note.StudentID
JOIN Materie ON Note.MaterieID=Materie.MaterieID
GROUP BY Student.Nume, Student.Prenume, Materie.MaterieID, Materie.Nume

-- 21. Să se afișeze studenții repetenți (au picat cel puțin o materie ).

SELECT Student.StudentID, Student.Nume, Student.Prenume
FROM Student
JOIN (
    SELECT StudentID, MaterieID, MAX(NoteID) AS [UltimaNotaID]
    FROM Note
    GROUP BY StudentID, MaterieID
) AS UltimaNote ON Student.StudentID = UltimaNote.StudentID
JOIN Note ON UltimaNote.UltimaNotaID = Note.NoteID
WHERE Note.Nota < 5.00;

-- 22. Să se mute toți repetenții într-o grupă nouă, grupa E. ( vezi pct. anterior)

BEGIN TRANSACTION;

INSERT INTO Grupa (Denumire)
VALUES ('E');

DECLARE @GrupaID INT;
SET @GrupaID = SCOPE_IDENTITY();

UPDATE Student
SET GrupaID = @GrupaID
WHERE StudentID IN (
    SELECT Student.StudentID
    FROM Student
    JOIN (
        SELECT StudentID, MaterieID, MAX(NoteID) AS UltimaNotaID
        FROM Note
        GROUP BY StudentID, MaterieID
    ) AS UltimaNota ON Student.StudentID = UltimaNota.StudentID
    JOIN Note N ON UltimaNota.UltimaNotaID = N.NoteID
    WHERE N.Nota < 5.00
);

COMMIT TRANSACTION;

-- 23. Cel mai slab student este exmatriculat. Să se șteargă studentul din baza de date.

BEGIN TRANSACTION;

DECLARE @LowestAverageStudentID INT;

WITH LatestGrades AS (
    SELECT StudentID, MaterieID, MAX(NoteID) AS UltimaNotaID
    FROM Note
    GROUP BY StudentID, MaterieID
),
StudentAverages AS (
    SELECT S.StudentID, AVG(N.Nota) AS MedieGenerala
    FROM Student S
    JOIN LatestGrades LG ON S.StudentID = LG.StudentID
    JOIN Note N ON LG.UltimaNotaID = N.NoteID
    GROUP BY S.StudentID
)
SELECT TOP 1 @LowestAverageStudentID = StudentID
FROM StudentAverages
ORDER BY MedieGenerala;

DELETE FROM Note
WHERE StudentID = @LowestAverageStudentID;

DELETE FROM Student
WHERE StudentID = @LowestAverageStudentID;

COMMIT TRANSACTION;

-- 24. Să se afișeze toți studenții care fac parte din aceeași familie ( au același nume de familie ), după modelul:
/*
	Nume		Prenume
	Ionescu		Andrei
	Ionescu		Andreea

	Rezultat afișat:

	Familia		Frații
	Ionescu		Andrei, Andreea
*/

SELECT
    Nume AS Familia,
    STUFF((SELECT ', ' + Prenume
           FROM Student AS S2
           WHERE S1.Nume = S2.Nume
           FOR XML PATH('')), 1, 2, '') AS Frații
FROM
    Student AS S1
GROUP BY
    Nume
HAVING
    COUNT(*) > 1;
